Acciones realizadas (resumen)
																																																																																																											
•	Implementé la función calcular_costo_envio en costos.py respetando las reglas del enunciado: validaciones, cálculo por rangos de peso, recargos por destino y prioridad, y redondeo final.
•	Configuré el entorno virtual del proyecto y instalé pytest.
•	Ejecuté la suite de tests: resultado actual — 13 passed (todos los tests existentes pasan).
o	Evidencia (salida): 13 passed in 2.38s.
Mapeo a la rúbrica (estado por ítem)
1.	30 pts — Plan de pruebas (CA, PE/AVL bien justificado)
o	Estado: parcialmente hecho.
o	He implementado la función y corrí los tests existentes, pero no añadí explícitamente la tabla de Partición de Equivalencia (PE) ni el Análisis de Valores Límite (AVL) en el repositorio/README.
o	A continuación incluyo la tabla PE/AVL propuesta (lista de casos concretos) que puedes copiar al README como evidencia.
2.	40 pts — Tests + cobertura ≥ 90% (incluye límites)
o	Estado: tests ejecutados y pasan (13 passed), pero no medí cobertura (coverage) aún.
o	Acción recomendada: ejecutar coverage run -m pytest y coverage report -m para obtener el porcentaje y añadir tests faltantes en caso de que la cobertura sea < 90%.
3.	20 pts — Calidad estática (ruff ok) y complejidad (radon ≤ 5)
o	Estado: no ejecutado todavía. Deben correrse ruff y radon para verificar cero errores y complejidad media ≤ 5.
o	Si hay fallos de estilo o complejidad, propongo corregirlos (pequeños ajustes o extracción de funciones).
4.	10 pts — Reporte claro (1 página) con evidencias y 3 defectos prevenidos
o	Estado: no creado. Puedo generar el reporte de 1 página que incluya: plan de pruebas, evidencia de tests (salida pytest), cobertura (tras medirla), ruff/radon outputs, y 3 defectos prevenidos (los explico abajo). 1Quieres que lo genere ahora como docs/reporte.pdf o REPORT.md?
________________________________________
Plan de pruebas (CA, PE/AVL) — casos sugeridos
Objetivo: cubrir particiones y límites. Incluyo 8 casos válidos y 4 inválidos.
Casos válidos (8)
1.	CA1 — Peso pequeño, nacional, estandar (peso límite inferior dentro del rango 0 < p <= 5)
o	Entrada: peso=1.0, destino='nacional', prioridad='estandar'
o	Resultado esperado: base 5000 + 2000*1 = 7000 1 redondeo 7000
2.	CA2 — Peso en límite 5 kg, nacional, estandar (AVL)
o	peso=5.0, destino='nacional', prioridad='estandar'
o	Esperado: 5000 + 2000*5 = 15000
3.	CA3 — Peso 6 kg (rango 5 < p <= 20), nacional, estandar
o	peso=6.0, destino='nacional', prioridad='estandar'
o	Esperado: 5000 + 1500*6 = 14000
4.	CA4 — Peso 20 kg (límite) nacional, estandar (AVL)
o	peso=20.0, destino='nacional', prioridad='estandar'
o	Esperado: 5000 + 1500*20 = 35000
5.	CA5 — Peso 21 kg (>20), nacional, estandar
o	peso=21.0, destino='nacional', prioridad='estandar'
o	Esperado: 5000 + 1200*21 = 5k + 25,200 = 30,200
6.	CA6 — Internacional, impacto del 25% (verificar multiplicación)
o	peso=10.0, destino='internacional', prioridad='estandar'
o	Subtotal: 5000 + 1500*10 = 20,000 1 *1.25 = 25,000
7.	CA7 — Express, impacto del 15% (verificar multiplicación)
o	peso=10.0, destino='nacional', prioridad='express'
o	Subtotal: 20,000 1 *1.15 = 23,000
8.	CA8 — Internacional + Express (combinación multiplicativa)
o	peso=2.5, destino='internacional', prioridad='express'
o	Subtotal: 5000 + 2000*2.5 = 5000 + 5000 = 10000 1 *1.25 = 12500 1 *1.15 = 14375 1 redondeo 14375
Casos inválidos (4)
1.	INV1 — Peso 0 (error)
o	peso=0, destino='nacional', prioridad='estandar' 1 ValueError
2.	INV2 — Peso negativo (error)
o	peso=-1, ... 1 ValueError
3.	INV3 — Destino inválido (error)
o	destino='interplanetario' 1 ValueError
4.	INV4 — Prioridad inválida (error)
o	prioridad='urgente' 1 ValueError
(Estos casos deben representarse en tests unitarios y agregarse si no están en test_costos.py).
Cobertura y comandos recomendados (cómo medir y comprobar)
Usa el intérprete del entorno virtual del proyecto (ejemplo en Windows PowerShell, adaptando la ruta si es distinta). Si ya usas el python del .venv:
Ejecutar tests:
	.venv\Scripts\Activate.ps1
	python -m pytest -q

Medir cobertura:

	python -m pip install coverage
	python -m coverage run -m pytest
	python -m coverage report -m

Estilo y complejidad:
	
	python -m pip install ruff radon
	ruff check .
	radon cc -s -a src
	
Interpretación:
	coverage report -m debe mostrar un porcentaje total ≥ 90% (si no, añadir tests).
	ruff check . 1 0 errores (si hay errores, se listan y corregimos).
	radon cc -s -a src 1 "Average complexity" media ≤ 5 (si >5, identificar funciones con alto CC y refactorizar).
